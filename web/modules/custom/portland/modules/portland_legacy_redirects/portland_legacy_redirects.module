<?php

use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 * - Adds relative_path constraint to field_legacy_path if it exists in fields array for the given bundle
 */
function portland_legacy_redirects_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle)
{
  if (array_key_exists('field_legacy_path', $fields)) {
    $fields['field_legacy_path']->addConstraint('relative_path', []);
  }
}

/**
 * Implements hook_form_alter().
 * - Queries db for redirects that point to this node's URI and adds them to the legacy_path field
 */
function portland_legacy_redirects_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if (array_key_exists('field_legacy_path', $form)) {
    portland_legacy_redirects_sync_redirects($form);
    // NOTE: if source is duplicate but destination changes, should we update redirect?
  }
}

/**
 * Called by hook_form_alter, this function synchrnized the legacy_paths field with the redirects table.
 * The legacy_paths field is essentially a new specialized UI for redirects.
 *
 * @return void
 */
function portland_legacy_redirects_sync_redirects(&$form) {

  $nid = \Drupal::routeMatch()->getParameter('node')->Id();
  $redirect_url = "entity:node/$nid";
  $redirects = \Drupal::service('redirect.repository')->findByDestinationUri([$redirect_url]);
  $new_deltas = array();
  $field = $form['field_legacy_path']['widget'];
  $max_delta = $field['#max_delta'];

    // if max_delta is zero, that means no paths have been saved, and a blank field has
    // been added to the form. we want that blank field to be at the end.
  $delta_counter = $max_delta == 0 ? $max_delta : $max_delta + 1;
  $save_empty_delta;
  if ($max_delta == 0) {
    $delta_counter = 0;
    $save_empty_delta = $form['field_legacy_path']['widget'][0];
    unset($form['field_legacy_path']['widget'][0]);
  } else {
    $delta_counter = $max_delta + 1;
  }

    // need to make sure there's a field delta for each of the redirects in $redirects,
  foreach ($redirects as $key => $redirect) {

    $source_path = $redirect->getSource()['path'];

      // spin through field_legacy_path values to see if $source_path is in there. if not, add.
    for ($i = 0; $i < $max_delta; $i++) {
      $source_value = portland_legacy_redirects_strip_leading_slash($field[$i]['value']['#default_value']);
      if ($source_path == $source_value) {
        break 2;
      }
    }

      // if there wasn't a match and break by this point, add $source_path to a temporary array,
      // which will be appended to field_legacy_path widget after the loops.
    $new_deltas[$delta_counter] = [
      '#delta' => $delta_counter,
      '#weight' => $delta_counter,
      'value' => [
        '#type' => 'textfield',
        '#size' => 60,
        '#maxlength' => 255,
        '#default_value' => '/' . $source_path
      ],
    ];

    $delta_counter++;
    $test = $form;
  }

    // now add new deltas to field
  foreach ($new_deltas as $idx => $delta) {
    $form['field_legacy_path']['widget'][] = $delta;
  }
  if ($max_delta == 0) {
    $form['field_legacy_path']['widget'][] = $save_empty_delta;
  }
}

/**
 * Implements hook_entity_update().
 */
function portland_legacy_redirects_entity_update($entity) {
  // if this is a node that has the legacy path field, create redirects
  if ($entity->getEntityTypeId() == 'node' && $entity->hasField('field_legacy_path')){

    $field = $entity->get('field_legacy_path')->getValue();
    $field_orig = $entity->get('field_legacy_path')->getValue();

    $redirect_url = "entity:node/" . $entity->id(); // $entity->toUrl()->toUriString()
    // $entity->toUrl()->toUriString() generates a URI string that looks like this: route:entity.node.canonical;node=332.
    // The Redirect module stores a string that looks like this: entity:node/332.
    // Both work for redirection, but only ones in the latter format appear in the node's URL Redirects panel.

    // existing redirects
    $redirects = \Drupal::service('redirect.repository')->findByDestinationUri([$redirect_url]);


    foreach ($field as $delta => $value) {
      $from_orig = $field_orig[$delta]['value'];
      $from = $value['value']; // from should always be unique because you can't have a source URL pointing to multiple destinations.
      if (substr($from, 0, 1) == "/") { $from = substr($from, 1); }

      $existing_from = \Drupal::service('redirect.repository')->findBySourcePath($from);

      if ($existing_from) {
        // this one already exists, don't add it to redirects table
        continue;
      }

      // when to break?
      // if (!$from == !$from_orig) break;

      if ($from == $from_orig && !$existing_from) {
        // first time, create it, nothing to delete
      }

      Redirect::create([
        'redirect_source' => $from,
        'redirect_redirect' => $redirect_url,
        'status_code' => 301,
      ])->save();
    }
  }
}

function portland_legacy_redirects_strip_leading_slash($path) {
  return substr($path, 0, 1) == "/" ? substr($path, 1) : $path;
}

