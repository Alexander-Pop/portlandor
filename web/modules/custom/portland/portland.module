<?php

use Drupal\group\GroupMembershipLoaderInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupTypeInterface;
use Drupal\group\Entity\GroupContentTypeInterface;
use Drupal\pathauto\Form\PathautoBulkUpdateForm;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;

// This file concerns itself with setting up tokens with hooks
include 'portland.tokens.inc';

/**
 * The plural is used in the list page URL. E.g. "/bds/services". The group
 * list view's path must match the plural form shown here. If the group list
 * view doesn't exist, visiting the alias will get a 404.
 */
const GROUP_CONTENT_TYPE_PLURAL = [
    "service" => ["services"],
    "building" => ["buildings"],
    "city_service" => ["services"],
    "service_location" => ["locations"],
    "event" => ["events", "events/past", "events/search"],
    "image" => ["images"],
    "news" => ["news", "blog", "news/press-releases", "public-notices"],
    "document" => ["documents"],
    "video" => ["videos"],
    "audio" => ["audios"],
    "media" => ["media"],
    "notification" => ["notifications"],
    "page" => ["pages"],
    "development_permit" => ["permits"],
    "location" => ["locations"],
    "calendar_item" => ["calendar/archive"],
    "construction_project" => ["construction"]
];

const ALERTS_COUNTER_CACHE_KEY = 'portland.active.alerts';

/**
 * these are the views which need to have cache tags invalidated if the
 * group_path changes.
 */
const GROUP_VIEWS = [
    "group_calendar_archive",
    "group_child_groups",
    "group_documents",
    "group_events",
    "group_news",
    "group_notifications",
    "group_pages",
    "group_permits",
    "group_services",
    "group_construction_projects"
];

/**
 * Get the parent group IDs of an entity.
 * See https://drupal.stackexchange.com/questions/238755/how-to-get-group-ids-by-ids-of-elements-of-group-content
 */
function getGroupIdsByEntity($entity) {
    if($entity == NULL) return [];
    $group_ids = [];

    $group_contents = GroupContent::loadByEntity($entity);
    foreach ($group_contents as $group_content) {
        $group_ids[] = $group_content->getGroup()->id();
    }

    return $group_ids;
}

/**
 * A helper function to create aliases like "/powr/news".
 * Called in three scenarios.
 * 1. when a new group is created.
 * 2. when a content type is installed in a group.
 * 3. During bulk alias generation.
 */
function _create_alias_for_group_content($grp, $contentType, $lang) {
  // When a content type is not installed, $pluginType->getPluginDefinition()['entity_bundle'] returns false. Otherwise it's the string like "news".
  if($contentType === false) return;

  $contentTypePluralArray = (isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType]);

    // The group_path should have been cleaned by group form validation
    $group_path = $grp->get('field_group_path')->value;
    $gid = $grp->id();
    // Create the alias for the group
    $path = \Drupal::service('path.alias_storage')->save("/group/$gid", "/$group_path", $lang);

  foreach( $contentTypePluralArray as $contentTypePlural ) {
    $alias = "/$group_path/$contentTypePlural";
    $system_path = "/group/$gid/$contentTypePlural";

    // If there is already an alias, skip it.
    $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);
    if ($existing_alias && $existing_alias == $alias) {
        return false;
    }

    $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
  }

  return true;
}

/**
 * A helper function to update aliases like "/bps/programs" when the
 * group_path "bps" is updated. Called when a new group is added or an
 * existing group is updated.
 */
function _update_group_aliases($group) {
    $group_path = $group->get('field_group_path')->value;
    $gid = $group->id();
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // POWR-438 Regenerate aliases for /bts/projects and /bts/programs
    if($group->bundle() === 'bureau_office' || $group->bundle() === 'elected_official' || $group->bundle() === 'project' || $group->bundle() === 'program') {
        $childGroups = ['projects', 'programs','advisory-groups','offices'];
        foreach($childGroups as $childGroup) {
            $system_path = "/group/$gid/$childGroup";
            $alias = "/$group_path/$childGroup";

            $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);
            // if it already exists and matches, do nothing
            if ($existing_alias && $existing_alias == $alias) continue;

            // if it exists and doesn't match current alias, delete in preparation for re-save
            if ($existing_alias && $existing_alias != $alias) {
                \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
            }

            // save new or updated alias
            $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
        }
    }

    // spin through group views, gather cache tags, and invalidate them
    $cache_tags = [];
    foreach (GROUP_VIEWS as $view_name) {
        $view = \Drupal\views\Views::getView($view_name);
        $tags = $view->getCacheTags();
        $cache_tags = array_merge($cache_tags, $tags);
    }

    Cache::invalidateTags($cache_tags);
}

/**
 * Implements hook_ENTITY_TYPE_create().
 * When a content type is installed to a group type, create the alias
 * "/group_path/content-plural" for all groups with that group type.
 */
function portland_group_content_type_create(GroupContentTypeInterface $groupContentType) {
  // Get all groups of this type. E.g. bureau_office
  $properties = ['type' => $groupContentType->getGroupTypeId()];
  $grps = \Drupal::entityTypeManager()
    ->getStorage('group')
    ->loadByProperties($properties);

  // Get the content type from content_plugin ID. E.g. "group_node:news"
  $contentTypePlugin = $groupContentType->getContentPluginId();

  if(strpos($contentTypePlugin, 'group_node:') === 0) {
    $contentType = substr($contentTypePlugin, strlen('group_node:'));
  } else if( strpos($contentTypePlugin, 'group_media:') === 0) {
    $contentType = substr($contentTypePlugin, strlen('group_media:'));
  } else {
    return;
  }

  // For each group, generate a new URL alias "group.field_group_path/contents"
  $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  foreach ($grps as $grp) {
    _create_alias_for_group_content($grp, $contentType, $lang);
  }
}
/**
 * Implements hook_ENTITY_TYPE_delete().
 * When a content type is uninstaled from a group type, delete the alias
 * added during creation time.
 */
function portland_group_content_type_delete(GroupContentTypeInterface $groupContentType) {
    // Get all groups of this type
    $properties = ['type' => $groupContentType->getGroupTypeId()];
    $grps = \Drupal::entityTypeManager()
        ->getStorage('group')
        ->loadByProperties($properties);
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // content_plugin:"group_node:news"
    $contentTypePlugin = $groupContentType->getContentPluginId();
    if(strpos($contentTypePlugin, 'group_node:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_node:'));
    } else if( strpos($contentTypePlugin, 'group_media:') === 0) {
        $contentType = substr($contentTypePlugin, strlen('group_media:'));
    } else {
        return;
    }

    // For each group, delete the URL alias "/group.field_group_path/contents". E.g. "/bds/news"
    $contentTypePluralArray = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType];

    foreach( $contentTypePluralArray as $contentTypePlural ) {
        foreach ($grps as $grp) {
            $gid = $grp->id();
            $system_path = "/group/$gid/$contentTypePlural";

            // If found an alias, delete it.
            $existing_alias = \Drupal::service('path.alias_storage')
                ->lookupPathAlias($system_path, $lang);
            if($existing_alias) {
                $path = \Drupal::service('path.alias_storage')
                    ->delete(['alias' => $existing_alias, 'langcode' => $lang]);
            }
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 * POWR-475 Changing short name of a group can cause the group URL to be
 * different from the URLs in the group menu. Root cause is that the group
 * URL is set by PathAuto to be clean and unique. But the URL in sidebar
 * menu is formed by Twig code using the short name as is. The solution is
 * to update short name to ensure it's clean and unique when the group is
 * updated.
 */
function portland_group_presave(GroupInterface $group) {
    $newgroup_path = $group->get('field_group_path')->value;
    if ($group->original === null) {
        $originalgroup_path = ''; // new group
    }
    else {
        $originalgroup_path = $group->original->get('field_group_path')->value;
    }
    // Check if this is a new group or an existing group whose group_path has been modified
    if( $originalgroup_path !== $newgroup_path) {
        $cleangroup_path = $newgroup_path;
        if( $cleangroup_path === '') $cleangroup_path = 'invalid-short-name';
        $alias = "/$cleangroup_path";
        $gid = $group->id();
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
        // Update the group path when we have alias conflict
        \Drupal::service("pathauto.alias_uniquifier")->uniquify($alias, "/group/$gid", $lang);
        $group->set('field_group_path', substr($alias, 1)); // Remove the first character "/"
    }
}

/**
 * A helper function to clean up group path.
 * Support "/" as part of group_path. Called by group form validation.
 * @param string $group_group_path Will be modified as a clean string by Path
 * @return boolean Flase if the input is invalid.
 */
function _clean_group_group_path(&$group_group_path) {
    if(empty($group_group_path)) return false;

    // If the group_path contains "/", we have to clean each part and put it back again.
    if (strpos($group_group_path, '/') !== false) {
        // Split the string and clean each part
        $original_parts = explode("/", $group_group_path);
        $parts = [];
        foreach($original_parts as $original_part){
            // Skip empty string
            if($original_part == "") continue;
            $parts[] = \Drupal::service("pathauto.alias_cleaner")->cleanString($original_part);
        }
        // The string only contains "/"
        if(count($parts) == 0) return false;
        // Put everything back again
        $group_group_path = implode("/", $parts);
    }
    else {
        $group_group_path = \Drupal::service("pathauto.alias_cleaner")->cleanString($group_group_path);
        if(empty($group_group_path)) return false;
    }
    return true;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 * Add and update group aliases like "/powr/news" when a group is added.
 */
function portland_group_insert(GroupInterface $group) {
    // Find all installed content types on this group type and generate alias if it's missing.
    $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($installedContentTypes as $pluginType) {
        $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
        _create_alias_for_group_content($group, $contentType, $lang);
    }

    _update_group_aliases($group);

    // Workaround for Drupal bug: https://www.drupal.org/project/inline_entity_form/issues/2966933
    $group->path->pathauto = Drupal\pathauto\PathautoState::CREATE;

    // <TODO:>LOW PRIORITY: Generate URL aliases for group action links using group path (ie. /bds/content, /bds/members)</TODO:>
}

/**
 * Implements hook_ENTITY_TYPE_update().
 * Add and update group aliases like "/powr/news" when a group is updated.
 */
function portland_group_update(GroupInterface $group) {
    // get group path
    $group_path = $group->get('field_group_path')->value;
    $orig_group_path = $group->original->get('field_group_path')->value;

    // only update URL aliases if group_path changes
    if ($group_path != $orig_group_path) {
        // 4.2. Bulk regenerate URL aliases for content by running pathauto batch processing
        $batch = array(
            'title' => t('Bulk updating URL aliases'),
            'operations' => array(
            array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchStart', array()),
            ),
            'finished' => 'Drupal\pathauto\Form\PathautoBulkUpdateForm::batchFinished',
        );
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:node", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group_content", "update"]);
        $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:media", "update"]);
        batch_set($batch);

        $gid = $group->id();
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

        // TODO: manually regenerate URL alias for main group page; pathauto bulk update isn't getting it sometimes
        $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias("/group/$gid", $lang);
        $alias = "/$group_path";
        // if it exists and doesn't match current alias, delete and re-save
        if ($existing_alias && $existing_alias != $alias) {
            \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
            $path = \Drupal::service('path.alias_storage')->save("/group/$gid", $alias, $lang);
        }

        _update_group_aliases($group);

        // POWR-142: Regenerate URL aliases for content type subpages using group path (ie. /bds/services)
        // reference: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Path%21AliasStorage.php/class/AliasStorage/8.6.x
        // Find all installed content types on this group type and generate alias if it's missing.
        $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
        foreach ($installedContentTypes as $pluginType) {
            $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
            // Skip if the content type is not installed with the group type.
            if($contentType === false) continue;
            $contentTypePluralArray = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : [$contentType];

            foreach( $contentTypePluralArray as $contentTypePlural ) {
                $system_path = "/group/$gid/$contentTypePlural";
                $alias = "/$group_path/$contentTypePlural";

                $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);

                // if it already exists and matches, do nothing
                if ($existing_alias && $existing_alias == $alias) continue;

                // if it exists and doesn't match current alias, delete in preparation for re-save
                if ($existing_alias && $existing_alias != $alias) {
                    \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
                }

                // save new or updated alias
                $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
            }
        }
    }

    // <TODO:>LOW PRIORITY: rEGenerate URL aliases for group action links using group path (ie. /bds/content, /bds/members)</TODO:>
}

/**
 * Implements hook_theme().
 */
function portland_theme($existing, $type, $theme, $path) {
  return [
    'portland_alert' => [
      'variables' => [
        'dismissible' => FALSE,
        'type' => NULL,
        'title' => NULL,
        'text' => NULL,
        'link_url' => NULL,
        'link_text' => NULL,
        'changed' => NULL,
        'nid' => NULL,
        'changed_timestamp' => NULL,
      ],
    ],

    'portland_revision_block' => [
        'variables' => [
            'title' => NULL,
            'alert_color' => NULL,
            'alert_icon' => NULL,
            'current_revision_state' => NULL,
            'latest_revision_state' => NULL,
            'revision_link' => NULL,
            'revision_link_text' => NULL,
        ],
        'template' => 'block--portland-revision-block',
    ],

  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function portland_entity_type_alter(array &$entity_types) {
    $node = $entity_types['node'];
    $node->addConstraint('EventDateTime', []);
}

/**
 * Implements hook_node_presave().
 */
function portland_node_presave($node) {
    if($node->bundle() == 'event') {
        // Clear start and end time for all-day events.
        if($node->field_all_day->value) {
            $node->set('field_start_time', NULL);
            $node->set('field_end_time', NULL);
        }
        // Clear the end date if it's the same as the start date.
        if(isset($node->field_end_date->value) &&
            $node->field_end_date->value == $node->field_start_date->value) {
            $node->set('field_end_date', NULL);
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Idea borrowed from https://julian.pustkuchen.com/node/659
 */
function portland_form_views_exposed_form_alter(&$form, &$form_state) {
    // Add an own reset button to all views exposed forms. The reason behind is that the default Drupal reset button doesn't play nice with AJAX
    $submit_btn_id = $form['actions']['submit']['#id'];
    if (!empty($submit_btn_id) && !empty($form['actions']['reset'])) {
      // Add own reset button
      $form['actions']['reset']['#attributes'] = array('onclick' => 'javascript:jQuery(this.form).clearForm();jQuery(this.form).find(\'#' . $submit_btn_id . '\').trigger(\'click\');return false;');
    }
  }

/**
 * Implements hook_preprocess_HOOK().
 */
function portland_preprocess_menu(&$vars)
{
    // find main menu and modify the Alerts link text to display number of alerts,
    // or remove the Alerts item if count is zero.
    if (array_key_exists('menu_name', $vars) && $vars['menu_name'] == 'main') {
        foreach ($vars['items'] as $key => &$item) {
            if ($item['title'] == 'Alerts') {
                $alertCount = _get_active_alerts_count();
                if ($alertCount < 1) {
                    unset($vars['items'][$key]);
                    return;
                }
                $item['title'] = Drupal\Core\Render\Markup::create('Alerts <span class="badge badge-dark">' . $alertCount . '</span>');
                break;
            }
        }
    }
}

/**
 * Implements hook_entity_insert().
 */
function portland_entity_insert($entity)
{
    if ($entity->bundle() == 'alert') {
        // alert has been inserted, update alerts count in cache
        _get_active_alerts_count(true);
    }
}

/**
 * Implements hook_entity_update().
 */
function portland_entity_update($entity)
{
    if ($entity->bundle() == 'alert') {
        // if moderation state has changed, update alerts count in cache
        $origstate = $entity->original->get('moderation_state')->getString();
        $newstate = $entity->get('moderation_state')->getString();
        if ($origstate != $newstate) {
            _get_active_alerts_count(true);
        }
    }
}

/**
 * A helper function to build the deletion log message of an entity.
 * Called by portland_entity_delete().
 */
function _build_log_message($entity) {
    if(!$entity) return '';

    $parentGroupTitle = '';
    if($entity->getEntityTypeId() == 'group_content') {
        $parentGroupTitle = 'Parent Group='.$entity->getGroup()->label().',   ';
        $titleText = 'Title='.$entity->label->value.','; // Group content didn't implement "label()"
    }
    else {
        $titleText = 'Title='.$entity->label().',';
    }

    $idText = 'ID='.$entity->id().',';
    $typeText = 'Type='.$entity->bundle().',';
    $createdText = ($entity->created) ? ('Created='.date('r', $entity->created->value)) : '';

    return "Deleted: $idText    \n$titleText    \n$typeText   \n$createdText    \n$parentGroupTitle";
}

/**
 * Implements hook_entity_delete().
 */
function portland_entity_delete($entity)
{
    if ($entity->bundle() == 'alert') {
        // alert has been deleted, update alerts count in cache
        _get_active_alerts_count(true);
    }

    // Log entity deletion event
    switch ($entity->getEntityTypeId()) {
        case 'group_content':
            \Drupal::logger('Group content')->notice(_build_log_message($entity));
            break;
        case 'node':
            \Drupal::logger('Content')->notice(_build_log_message($entity));

            break;
        case 'media':
            \Drupal::logger('Media')->notice(_build_log_message($entity));
            break;
        default:
            // Skip other deletion events: redirect, group, etc.
            break;
    }
}

/**
 * Retrieves the number of active alerts. Uses caching.
 */
function _get_active_alerts_count($reset = false)
{
    $alertCount = 0;
    if (!$reset && $cache = \Drupal::cache()->get(ALERTS_COUNTER_CACHE_KEY)) {
        $alertCount = $cache->data;
    } else {
        // invalidate main menu block in cache to show current alerts
        \Drupal\Core\Cache\Cache::invalidateTags(['config:block.block.cloudy_main_menu']);
        $query = \Drupal::entityQuery('node')
            ->condition('type', 'alert')
            ->condition('status', 1);
        $nids = $query->execute();
        $alertCount = count($nids);
        \Drupal::cache()->set(ALERTS_COUNTER_CACHE_KEY, $alertCount);
    }
    return $alertCount;
}

/**
 * Implements template_preprocess_paragraph
 */
function portland_preprocess_paragraph(&$vars) {
    switch( $vars['paragraph']->bundle()) {
        case 'image':
            $image = $vars['paragraph'];
            if( $image->hasField("field_image_alignment") &&
                $image->field_image_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'],
                        ['float-'.$image->field_image_alignment->value, 'image-align']
                    );
            }
            break;
        case 'document':
            // If there is not an existing class array, create an empty array.
            if (!isset($vars['attributes']['class'])) {
                $vars['attributes']['class'] = [];
            };
            $document = $vars['paragraph'];

            if ($document->hasField("field_document") &&
                $document->field_document->entity !== NULL) {
                // Map mimetype to font awesome icon names. Sources:
                // https://api.drupal.org/api/drupal/includes%21file.mimetypes.inc/function/file_default_mimetype_mapping/7.x
                // https://fontawesome.com/icons?d=gallery
                $mimetypeToFontawesomeIcon = [
                    'text/plain' => 'file',
                    'application/pdf' => 'file-pdf',
                    'application/msword' => 'file-word', // *.doc
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'file-word', // *.docx
                    'application/vnd.ms-excel' => 'file-excel', // *.xls
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'file-excel', // *.xlsx
                    'application/vnd.ms-powerpoint' => 'file-powerpoint', // *.ppt
                    'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'file-powerpoint',
                ];

                // Paragraph -> Media -> File
                if (isset($document->field_document->entity->field_document->entity)) {
                    $vars['fileSize'] = format_size(
                        $document->field_document->entity->field_document->entity->getSize()
                    );
                    $vars['fileUrl'] = $document->field_document->entity->field_document->entity->url();
                    $mimeType = $document->field_document->entity->field_document->entity->getMimeType();
                    // Set fontawesome icon based on mime type. Use "file" as the default in case no matching mime type is found.
                    $vars['fontawesomeIcon'] = array_key_exists($mimeType, $mimetypeToFontawesomeIcon) ?
                        $mimetypeToFontawesomeIcon[$mimeType] : 'file';
                }
            };
            break;
        case 'video':
        case 'audio':
            // NOTE: audio files also use a YouTube video player and re-uses field_video_alignment
            $video = $vars['paragraph'];
            if( $video->hasField("field_video_alignment") &&
                $video->field_video_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'],
                        ['float-'.$video->field_video_alignment->value, 'video-align']
                    );
            }
            break;
        case 'quote':
            $quote = $vars['paragraph'];
            if( $quote->hasField("field_alignment") &&
                $quote->field_alignment->value !== NULL) {
                    // If there is not an existing class array, create an empty array.
                    if (!isset($vars['attributes']['class'])) {
                        $vars['attributes']['class'] = [];
                    }
                    $vars['attributes']['class'] = array_merge(
                        $vars['attributes']['class'],
                        ['float-'.$quote->field_alignment->value, 'quote-align']
                    );
            }
            break;
    }
}

/**
 * Implements hook_form_FORM_ID_alter.
 * Add custom bulk generate action to the bulk generate button.
 */
function portland_form_pathauto_bulk_update_form_alter(&$form, $form_state) {
    $form['actions']['submit']['#submit'][] = '_handle_bulk_generate';
}

/**
 * The submit handler for the bulk generate button. When bulk generating
 * aliases for taxonomy terms, we also generate aliases for
 * "/taxonomy/term/CONTENT_TYPE" and "/taxonomy/term/GROUP_TYPE"
 */
function _handle_bulk_generate($form, $form_state) {
    // If taxonomy_term is selected
    if($form_state->getValues()['update']['canonical_entities:taxonomy_term'] === 'canonical_entities:taxonomy_term') {
        // Generate aliases for "term/content_type"
        $contentTypes = ['offices', 'programs', 'projects', 'advisory-groups', 'services', 'events', 'news', 'pages', 'documents', 'calendar-item'];
        $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $vid = 'topics';
        $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
        foreach ($terms as $term) {
            $tid = $term->tid;
            // Check the term's alias
            $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias("/taxonomy/term/$tid", $lang);
            if( !$existing_alias ) continue;
            foreach($contentTypes as $contentType) {
                $system_path = "/taxonomy/term/$tid/$contentType";

                $existing_content_alias =  \Drupal::service('path.alias_storage')->lookupPathAlias("/taxonomy/term/$tid/$contentType", $lang);
                $new_content_alias = "$existing_alias/$contentType";

                if( $new_content_alias && $new_content_alias == $existing_content_alias) continue;

                if ($existing_content_alias && $existing_content_alias != $new_content_alias) {
                    \Drupal::service('path.alias_storage')->delete(['alias' => $existing_content_alias, 'langcode' => $lang]);
                }

                // // save new or updated alias
                $path = \Drupal::service('path.alias_storage')->save($system_path, $new_content_alias, $lang);
            }
        }
    }
    else if($form_state->getValues()['update']['canonical_entities:group'] === 'canonical_entities:group') {
        $groupTypes = ['bureau_office', 'elected_official', 'project', 'program', 'advisory_group'];
        foreach ($groupTypes as $groupType) {
            // Get all groups of this type. E.g. bureau_office
            $grps = \Drupal::entityTypeManager()
                ->getStorage('group')
                ->loadByProperties(['type' => $groupType]);
            foreach($grps as $group) {
                $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
                $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
                foreach ($installedContentTypes as $pluginType) {
                    $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
                    _create_alias_for_group_content($group, $contentType, $lang);
                }
            }
        }
    }
}

/**
 * If loaded page is one of the specified group views, get the group name and
 * add it to the html title by setting $vars['head_title']['title']. This
 * prevents duplicate page titles within groups for views such as Services,
 * etc. The title format is "[page title] | [group] | [site name]".
 * Called by cloudy_preprocess_html() in cloudy.theme.
 *
 * @param [type] $vars
 * @return void
 */
function portland_set_extended_title_for_group_views(&$vars)
{
    $route_match = \Drupal::routeMatch();
    $new_title = portland_generate_extended_title_for_group_views($vars['page']['#title'], $route_match);
    $vars['head_title']['title'] = $new_title;
    $vars['title_override_set'] = true;
}

function portland_generate_extended_title_for_group_views($orig_title, $route_match) {
    // get the view id from the path
    $view_id = $route_match->getParameter('view_id');
    $taxonomy_term = $route_match->getParameter('taxonomy_term');
    $site_name = \Drupal::config('system.site')->get('name');
    $display_id = $route_match->getParameter('display_id');

    if (!isset($view_id) && isset($taxonomy_term)) {
        // it's a taxonomy term page, use the term name in the title to prevent duplicates
        $tid = $taxonomy_term->id();
        $group_title = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid)->name->value;
        return "$orig_title | $group_title | $site_name";
    }

    switch ($view_id) {
        case "group_programs":
        case "group_offices":
        case "group_projects":
        case "group_events":
        case "group_media":
        case "group_news":
        case "group_services":
        case "group_pages":
            $group_id = $route_match->getParameter('group'); // sometimes the group object is returned; sometimes just the id string
            $type = is_string($group_id) ? "string" : get_class($group_id);
            $group_entity = $type == "Drupal\group\Entity\Group" ? $group_id : Drupal\group\Entity\Group::load($group_id);
            if (isset($group_entity)) {
                $page_title = $orig_title;
                $group_title = $group_entity->label();
                return "$page_title | $group_title | $site_name";
            }
            break;
        case "content_at_location":
            // Get location title
            $location_nid = $route_match->getParameter('arg_0');
            if($location_nid == null) break;
            $location_node = \Drupal\node\Entity\Node::load($location_nid);
            if($location_node == null) break;
            $location_title = $location_node->getTitle();
            switch ($display_id) {
                case "page_past_events_at_location":
                    return "Past events | $location_title | $site_name";
                    break;
                case "page_upcoming_events_at_location":
                    return "Upcoming events | $location_title | $site_name";
                    break;
                case "page_news_at_location":
                    return "News | $location_title | $site_name";
                    break;
            }
            break;
    }
    return "$orig_title | $site_name";
}

/**
 * Implements hook_form_alter
 */
function portland_address_field_form_alter(&$form, $form_state, $form_id)
{
    // POWR-699
    // If address field is present, change organization label back to 'Organization'.
    // This field is present in many bundles, so it will be easier to check for its
    // presence than checking the form_id.
    if (isset($form['field_address'])) {
        // when adding a custom #process callback, we need to manually add back the processAddress callback below
        $form['field_address']['widget'][0]['address']['#process'][] = ['Drupal\address\Element\Address', 'processAddress'];
        $form['field_address']['widget'][0]['address']['#process'][] = 'portland_change_address_company_label';
    }
}

function portland_change_address_company_label($element, $form_state, $complete_form)
{
    $element['organization']['#title'] = t('Organization');
    return $element;
}

/**
 * Implements hook_diff_layout_builder_info_alter from Diff module.
 */
function portland_diff_layout_builder_info_alter(array &$diff_layouts) {
    // Set a new label for the text_field_diff_builder plugin
    // instead of the one provided in the annotation.
    $diff_layouts['visual_inline']['label'] = t('Visual inline (slow)');
}

/**
 * Implements hook_search_api_solr_query_alter() boost based on recently
 * published date.
 * See https://atendesigngroup.com/blog/drupal-8-apache-solr-boost-search-term-relevance-publish-date
 */
function portland_search_api_solr_query_alter(\Solarium\QueryType\Select\Query\Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
    $date_field_name = 'aggregated_sorting_date'; // 'created'; // This can be any UNIX timestamp field
    $index = $query->getIndex();
    $fields = $index->getServerInstance()->getBackend()->getSolrFieldNames($index);
    $solr_field = !empty($fields[$date_field_name]) ? $fields[$date_field_name] : '';
    // See the link above for the effect of magic numbers
    if ($solr_field) {
      $solarium_query->addParam('bf', "recip(abs(ms(NOW/HOUR,{$solr_field})),3.16e-11,.08,.05)^4");
    }
  }

/**
 * Implements hook_system_breadcrumb_alter().
 */
function portland_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
    // For breadcrumb "policy/category1/category2" or "policy/category1",
    // set the category name to taxonomy term name.
    $links = $breadcrumb->getLinks();
    if( count($links) > 1 && $links[0]->getUrl()->getInternalPath() == 'policy'){
        // Loop must start at index 1, not 0. 0 is "policy".
        for($i=1; $i<count($links); $i++) {
            $tid = $links[$i]->getUrl()->getRouteParameters()['taxonomy_term'];
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
            if($term == NULL) continue; // skip if we can't load by term ID
            $links[$i]->setText($term->getName());
        }
    }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function portland_inline_entity_form_entity_form_alter(&$entity_form, &$form_state)
{
    if (
        $entity_form['#entity_type'] == 'media' &&
        array_key_exists('group_content', $entity_form) &&
        array_key_exists('widget', $entity_form["group_content"])&&
        array_key_exists('add_more', $entity_form["group_content"]['widget'])&&
        array_key_exists('add_relation', $entity_form["group_content"]['widget']['add_more'])
    ) {
        // Set the Group field to the correct default value. Have to use session because the entity browser is in an iFrame.
        $group_id = \Drupal::request()->getSession()->get('parent_group_id');
        if($group_id != null) {
            $entity_form["group_content"]['widget']['add_more']['add_relation']['#default_value'] = $group_id;
        }
    }
}

/**
 * Implements hook_form_alter().
 */
function portland_form_alter(&$form, &$form_state, $form_id) {
    // Only set the default field for new Media items
    $form_array_with_group_field = [
        'node_news_form',
        'node_page_form',
        'node_event_form',
        'media_image_add_form',
        'media_audio_add_form',
        'media_video_add_form',
        'media_document_add_form',
        'media_map_add_form'
    ];

    $group_form_prefix = 'group_';

    if( in_array($form_id, $form_array_with_group_field) ) {
        // Set the default value as the node's current group
        $node = $form_state->getFormObject()->getEntity();
        $group_id = NULL;
        if($node->isNew()) {
            if(array_key_exists('group', $form_state->getStorage()) && $form_state->getStorage()['group'] != NULL) {
                $group_id = $form_state->getStorage()['group']->id();
                if( array_key_exists('group_content', $form) && $group_id != NULL ) {
                    \Drupal::request()->getSession()->set('parent_group_id', $group_id);
                }
            }
        }
    }
    else if(substr_compare($form_id, $group_form_prefix, 0, strlen($group_form_prefix)) === 0) {
            $form['#validate'][] = '_validate_group_group_path';
    }
}

/**
 * A helper function to validate group path.
 */
function _validate_group_group_path(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    if ($form_state->hasValue('field_group_path')) {
       $group_group_path = $form_state->getValue('field_group_path')[0]['value'];
       $is_valid_group_path = _clean_group_group_path($group_group_path);
       $form_state->setValue('field_group_path', ['0' => ['value' => $group_group_path,], ]);

       if ($is_valid_group_path) {
        $group_id = $form_state->getformObject()->getEntity()->id();
        $pathStorage = \Drupal::entityTypeManager()->getStorage('path_alias');
        $aliases = $pathStorage->loadByProperties(['alias' => '/'.$group_group_path]);
        // If this is a new group, $group_id will be null.
        if($group_id == null){
            // Check if the alias already taken by any entity
            if(count($aliases) > 0) {
                $existing_alias = array_values($aliases)[0]->alias->value;
                $form_state->setErrorByName('field_group_path', t('The alias is already taken: <a href="'.$existing_alias.'">'.$existing_alias.'</a>'));
            }
        }
        else {
            // If this is an existing group, check if the alias is already taken by anything OTHER THAN the current group
            foreach($aliases as $alias) {
                if($alias->path->value != "/group/$group_id") {
                    $form_state->setErrorByName('field_group_path', t('The alias is already taken: <a href="'.$alias.'">'.$alias.'</a>'));
                    break;
                }
            }
        }
       }
       else {
        $form_state->setErrorByName('field_group_path', t('Invalid group path'));
       }
    }
}