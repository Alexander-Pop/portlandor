<?php

use Drupal\group\GroupMembershipLoaderInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupTypeInterface;
use Drupal\group\Entity\GroupContentTypeInterface;
use Drupal\pathauto\Form\PathautoBulkUpdateForm;

// The plural is used in the list page URL. E.g. "/bds/guides"
// The group list view's path must match the plural form shown here.
// If the group list view doesn't exist, visiting the alias will get a 404.
const GROUP_CONTENT_TYPE_PLURAL = [
    "service" => "services",
    "guide" => "guides",
    "building" => "buildings",
    "city_service" => "services",
    "service_location" => "locations",
];

function createAliasForGroupContent($grp, $contentType, $lang) {
    // When a content type is not installed, $pluginType->getPluginDefinition()['entity_bundle'] returns false. Otherwise it's the string like "news".
    if($contentType === false) return;

    $contentTypePlural = (isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : $contentType);

    // Clean up shortname as it's from the editor
    $shortname = \Drupal::service("pathauto.alias_cleaner")
                ->cleanString($grp->get('field_shortname_or_acronym')->value);
    $alias = "/$shortname/$contentTypePlural";
    $gid = $grp->id();
    $system_path = "/group/$gid/$contentTypePlural";

    // If there is already an alias, skip it.
    $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);
    if ($existing_alias && $existing_alias == $alias) {
        return false;   
    }

    $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
    return true;
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
// When a content type is installed to a group type, create the alias for all groups with that group type.
function portland_group_content_type_create(GroupContentTypeInterface $groupContentType) {
    // Get all groups of this type. E.g. bureau_office
    $properties = ['type' => $groupContentType->getGroupTypeId()];
    $grps = \Drupal::entityTypeManager()
        ->getStorage('group')
        ->loadByProperties($properties);

    // Get the content type from content_plugin ID. E.g. "group_node:news"
    $contentTypePlugin = $groupContentType->getContentPluginId();
    if(strpos($contentTypePlugin, 'group_node:') !== 0) return;
    $contentType = substr($contentTypePlugin, strlen('group_node:'));

    // For each group, generate a new URL alias "group.field_shortname_or_acronym/contents"
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($grps as $grp) {
        createAliasForGroupContent($grp, $contentType, $lang);
    }    
}
/**
 * Implements hook_ENTITY_TYPE_delete().
 */
// When a content type is uninstaled from a group type, delete the alias added during creation time.
function portland_group_content_type_delete(GroupContentTypeInterface $groupContentType) {
    // Get all groups of this type
    $properties = ['type' => $groupContentType->getGroupTypeId()];
    $grps = \Drupal::entityTypeManager()
        ->getStorage('group')
        ->loadByProperties($properties);
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    // content_plugin:"group_node:news"
    $contentTypePlugin = $groupContentType->getContentPluginId();
    if(strpos($contentTypePlugin, 'group_node:') !== 0) return;
    $contentType = substr($contentTypePlugin, strlen('group_node:'));

    // For each group, delete the URL alias "/group.field_shortname_or_acronym/contents". E.g. "/bds/news"
    $contentTypePlural = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : $contentType;
    foreach ($grps as $grp) {
        $gid = $grp->id();
        $system_path = "/group/$gid/$contentTypePlural";

        // If found an alias, delete it.
        $existing_alias = \Drupal::service('path.alias_storage')
            ->lookupPathAlias($system_path, $lang);
        if($existing_alias) {
            $path = \Drupal::service('path.alias_storage')
                ->delete(['alias' => $existing_alias, 'langcode' => $lang]);
        }
    }  
}


/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function portland_group_insert(GroupInterface $group) {
    // Find all installed content types on this group type and generate alias if it's missing.
    $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($installedContentTypes as $pluginType) {
        $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
        createAliasForGroupContent($group, $contentType, $lang);
    }

    // Workaround for Drupal bug: https://www.drupal.org/project/inline_entity_form/issues/2966933
    $group->path->pathauto = Drupal\pathauto\PathautoState::CREATE;

    // <TODO:>LOW PRIORITY: Generate URL aliases for group action links using group shortname (ie. /bds/content, /bds/members)</TODO:>
}
  
/**
 * Implements hook_ENTITY_TYPE_update().
 */
function portland_group_update(GroupInterface $group) {

    // 4.2. Bulk regenerate URL aliases for content by running pathauto batch processing
    $batch = array(
        'title' => t('Bulk updating URL aliases'),
        'operations' => array(
          array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchStart', array()),
        ),
        'finished' => 'Drupal\pathauto\Form\PathautoBulkUpdateForm::batchFinished',
    );
    $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:node", "update"]);
    $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group", "update"]);
    $batch['operations'][] = array('Drupal\pathauto\Form\PathautoBulkUpdateForm::batchProcess', ["canonical_entities:group_content", "update"]);
    batch_set($batch);

    // get goup shortname and build paths
    $gid = $group->id();
    $shortname = \Drupal::service("pathauto.alias_cleaner")->cleanString($group->get('field_shortname_or_acronym')->value);
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // TODO: manually regenerate URL alias for main group page; pathauto bulk update isn't getting it sometimes
    $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias("/group/$gid", $lang);
    $alias = "/$shortname";
    // if it exists and doesn't match current alias, delete and re-save
    if ($existing_alias && $existing_alias != $alias) {
        \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
        $path = \Drupal::service('path.alias_storage')->save("/group/$gid", $alias, $lang);
    }
    
    // POWR-142: Regenerate URL aliases for content type subpages using group shortname (ie. /bds/services)
    // reference: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Path%21AliasStorage.php/class/AliasStorage/8.6.x
    // Find all installed content types on this group type and generate alias if it's missing.
    $installedContentTypes = $group->getGroupType()->getInstalledContentPlugins();
    foreach ($installedContentTypes as $pluginType) {
        $contentType = $pluginType->getPluginDefinition()['entity_bundle'];
        // Skip if the content type is not installed with the group type.
        if($contentType === false) return;
        $contentTypePlural = isset(GROUP_CONTENT_TYPE_PLURAL[$contentType]) ? GROUP_CONTENT_TYPE_PLURAL[$contentType] : $contentType;
        $system_path = "/group/$gid/$contentTypePlural";
        $alias = "/$shortname/$contentTypePlural";

        $existing_alias = \Drupal::service('path.alias_storage')->lookupPathAlias($system_path, $lang);

        // if it already exists and matches, do nothing
        if ($existing_alias && $existing_alias == $alias) continue;

        // if it exists and doesn't match current alias, delete in preparation for re-save
        if ($existing_alias && $existing_alias != $alias) {
            \Drupal::service('path.alias_storage')->delete(['alias' => $existing_alias, 'langcode' => $lang]);
        }

        // save new or updated alias
        $path = \Drupal::service('path.alias_storage')->save($system_path, $alias, $lang);
    }

    // <TODO:>LOW PRIORITY: rEGenerate URL aliases for group action links using group shortname (ie. /bds/content, /bds/members)</TODO:>
}

function portland_preprocess_views_view_unformatted(&$vars) {
    $view = $vars['view'];
    $rows = $vars['rows'];
    if ($view->id() == 'alerts') {
        foreach ($rows as $id => $row) {
            $vars['rows'][$id]['attributes']->addClass(["alert", "alert-".$view->result[$id]->_entity->field_severity->value]);
        }
    }
}

function portland_preprocess_views_view_field(&$vars) {
    $view = $vars['view'];
    $rows = $vars['rows'];
    $field = $vars['field'];
    if ($view->id() == "alerts" && $view->current_display == 'block_1') {
        if($field->field == 'title') {
            $vars['output'] = Drupal\Core\Render\Markup::create($vars['output'].'<button type="button" class="close" aria-label="Close"><span aria-hidden="true">Ã—</span></button>');
        }
    }
}

function portland_preprocess_block(&$vars) {
    if ($vars['elements']['#id'] == 'alerts') {
      $vars['#attached']['library'][] = 'system/jquery.cookie';
    }
  }